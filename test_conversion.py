"""
Script de teste para verificar se todos os m√≥dulos Python funcionam corretamente.
Execute este script para testar rapidamente as convers√µes dos notebooks.
"""

import subprocess
import sys
import os

def test_imports():
    """Testa se todas as depend√™ncias est√£o instaladas"""
    print("=== Testando importa√ß√µes ===")
    
    modules = [
        'torch',
        'numpy',
        'sklearn',
        'matplotlib',
        'pandas',
        'yfinance'
    ]
    
    for module in modules:
        try:
            __import__(module)
            print(f"‚úì {module} - OK")
        except ImportError as e:
            print(f"‚úó {module} - ERRO: {e}")
            return False
    
    return True

def test_datasets():
    """Testa se os datasets est√£o acess√≠veis"""
    print("\n=== Testando datasets ===")
    
    try:
        from sklearn import datasets
        
        # Teste Iris
        iris = datasets.load_iris()
        print(f"‚úì Iris dataset - {iris.data.shape} samples")
        
        # Teste Wine
        wine = datasets.load_wine()
        print(f"‚úì Wine dataset - {wine.data.shape} samples")
        
        # Teste Breast Cancer
        breast = datasets.load_breast_cancer()
        print(f"‚úì Breast Cancer dataset - {breast.data.shape} samples")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erro ao carregar datasets: {e}")
        return False

def test_pytorch():
    """Testa funcionalidades b√°sicas do PyTorch"""
    print("\n=== Testando PyTorch ===")
    
    try:
        import torch
        import torch.nn as nn
        
        # Teste b√°sico de tensor
        x = torch.randn(5, 3)
        print(f"‚úì Tensor criado: {x.shape}")
        
        # Teste b√°sico de rede neural
        class TestNet(nn.Module):
            def __init__(self):
                super(TestNet, self).__init__()
                self.fc1 = nn.Linear(3, 5)
                self.fc2 = nn.Linear(5, 1)
                
            def forward(self, x):
                x = torch.relu(self.fc1(x))
                x = self.fc2(x)
                return x
        
        net = TestNet()
        output = net(x)
        print(f"‚úì Rede neural funcionando: {output.shape}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erro no PyTorch: {e}")
        return False

def test_quick_training():
    """Testa um treinamento r√°pido"""
    print("\n=== Testando treinamento r√°pido ===")
    
    try:
        import torch
        import numpy as np
        from sklearn import datasets
        
        # Carregar dados do Iris
        iris = datasets.load_iris()
        X = torch.FloatTensor(iris.data) / 10
        y = torch.FloatTensor((iris.target == 0).astype(float))
        
        # Rede neural simples
        class SimpleNet(torch.nn.Module):
            def __init__(self):
                super(SimpleNet, self).__init__()
                self.fc1 = torch.nn.Linear(4, 5)
                self.fc2 = torch.nn.Linear(5, 1)
                
            def forward(self, x):
                x = torch.relu(self.fc1(x))
                x = torch.sigmoid(self.fc2(x))
                return x
        
        model = SimpleNet()
        criterion = torch.nn.MSELoss()
        optimizer = torch.optim.SGD(model.parameters(), lr=0.1)
        
        # Treinamento r√°pido (10 √©pocas)
        for epoch in range(10):
            optimizer.zero_grad()
            output = model(X)
            loss = criterion(output.squeeze(), y)
            loss.backward()
            optimizer.step()
        
        print(f"‚úì Treinamento conclu√≠do - Loss final: {loss.item():.4f}")
        return True
        
    except Exception as e:
        print(f"‚úó Erro no treinamento: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE DE CONVERS√ÉO DOS NOTEBOOKS")
    print("=" * 50)
    
    all_tests_passed = True
    
    # Executar testes
    tests = [
        test_imports,
        test_datasets,
        test_pytorch,
        test_quick_training
    ]
    
    for test in tests:
        if not test():
            all_tests_passed = False
    
    print("\n" + "=" * 50)
    if all_tests_passed:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("üéâ Os arquivos Python est√£o funcionando corretamente!")
        print("\nPr√≥ximos passos:")
        print("1. Execute os arquivos Python individuais")
        print("2. Consulte o README.md para instru√ß√µes detalhadas")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        print("üí° Verifique as depend√™ncias e tente novamente")
        print("üìã Execute: pip install -r requirements.txt")
    
    return all_tests_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
